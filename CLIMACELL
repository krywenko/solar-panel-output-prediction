#!/bin/bash
LAT=51.4298255        #your latitude
LON=-97.4662374       #your longitude 
API= #clima api key
P_offset=1  # either 0 no offset or 1 30 minute offset
Wm2=1000  # maxium solar potential
ACO=0.80     # average cloud opacitity 0.6 - 0.9 
JSON=$(lynx -dump "https://api.climacell.co/v3/weather/forecast/hourly?lat=$LAT&lon=$LON&unit_system=si&start_time=now&fields=surface_shortwave_radiation&fields=visibility&fields=cloud_cover&fields=cloud_base&fields=cloud_ceiling&apikey=$API" )



echo $JSON |jq '.[] | "\(.observation_time.value) \(.cloud_cover.value) \(.visibility.value) \(.surface_shortwave_radiation.value) \(.cloud_base.value) \(.cloud_ceiling.value) " ' | tr -d '"'|tr " "  "," > /dev/shm/cloudinessC
#echo $JSON |jq  '.daily[] | "\(.dt) \(.clouds)"'  | tr -d '"'|tr " "  "," > cloudinessC2

PCloud=-1

#rm solarOutputC
echo timestamp,potenial,wattage,predicted%,C% ,Wm2,SSR > Clima.csv 
while IFS=, read -r Time Cloud  Vis SSR CloudB CloudC
do
 #echo $Time $Cloud $CloudB $CloudC $Vis $SSR
Time=$(date +%s  -d $Time)
number=$(date -d @$Time +"%H" )
number=$(echo "$number *2" | bc )
#month=$(date -d @$Time +"%m" )
DAY=$(date -d @$Time +%j )
#echo $DAY
# echo  ------- $Vis
##########  solar panel potential  adjust you panel angle diffences   #######################

if  (( $(bc <<< "$Vis > 16") )) ;then
   Vis=16
   echo now 16
   fi
   
if (( $(bc <<< "$Vis < 1") )) ;then
   Vis=1
   echo now 1
   fi 

############ Time Extropatation #########################

if [ $PCloud == -1 ]
then
PCloud=$Cloud
PTIME=$Time
PVis=$Vis
echo ------
numberA=$(echo "$number - $P_offset" | bc -l )
potential=$(./panelconf $numberA)

output=$(python3 -W ignore radiation.py -lon $LON -lat $LAT -t $Time)
OUTPUT=$(printf "%0.2f\n" $output)
Opac=$(echo $Cloud*$ACO |bc -l)
TMP=$(echo 100-$Opac |bc -l)
TMP=$(echo $TMP/100 |bc -l)
VisA=$(echo $Vis/16 |bc -l)

 # echo "scale=4;(($output*$TMP) * $Vis)/$Wm2" | bc -l
output=$( echo "scale=4;((($output*$TMP) * $VisA)/$Wm2)" | bc -l)
pot=$(echo $potential* $output | bc )
pot=$(printf "%0.2f\n" $pot)
echo   $numberA,$potential,$pot,$output,$Cloud

echo $Time $potential $pot $output  $Cloud $OUTPUT $SSR  |tr " "  "," >> Clima.csv

##### mqtt send to database ##################
   mosquitto_pub -h 192.168.168.251 -t 'incoming/test/mqtt-Energy/power-predict_W2P' -m "$Time:$pot"
    mosquitto_pub -h 192.168.168.251 -t 'incoming/test/mqtt-Energy/power-predict_W2' -m "$Time:$OUTPUT"
   mosquitto_pub -h 192.168.168.251 -t 'incoming/test/mqtt-Energy/power-predict_C2' -m "$Time:$Cloud"
      mosquitto_pub -h 192.168.168.251 -t 'incoming/test/mqtt-Energy/power-predict_C2B' -m "$Time:$CloudB"
         mosquitto_pub -h 192.168.168.251 -t 'incoming/test/mqtt-Energy/power-predict_C2C' -m "$Time:$CloudC"
        mosquitto_pub -h 192.168.168.251 -t 'incoming/test/mqtt-Energy/power-predict_S2' -m "$Time:$SSR"
 else
 
  ########### extroplate ###############
 PTIME=$(echo $PTIME + 1800 | bc)
 PCloud=$(echo "($Cloud + $PCloud)/2" |bc)
 PVis=$(echo "($Vis + $PVis)/2" |bc)
 output=$(python3 -W ignore radiation.py -lon $LON -lat $LAT -t $PTIME)
 OUTPUT=$(printf "%0.2f\n" $output)
Opac=$(echo $PCloud*$ACO |bc -l)
TMP=$(echo 100-$Opac |bc -l)
TMP=$(echo $TMP/100 |bc -l)
PVis=$(echo $PVis/16 |bc -l)
numberC=$(echo "$number - ($P_offset*2) " | bc -l )
potential=$(./panelconf $numberC)
#echo  $numberC  $potential   ---------C

#echo "scale=4;(($output*$TMP) * $PVis)/$Wm2" | bc -l
output=$( echo "scale=4;((($output*$TMP) * $PVis)/$Wm2)" | bc -l)
pot=$(echo $potential* $output | bc )
pot=$(printf "%0.2f\n" $pot)

echo   $numberC,$potential,$pot,$output,$PCloud

echo $PTIME $potential $pot $output $Cloud  $OUTPUT null   |tr " "  ","  >> Clima.csv
##### mqtt send to database ##################
  mosquitto_pub -h 192.168.168.251 -t 'incoming/test/mqtt-Energy/power-predict_W2P' -m "$PTIME:$pot"
     mosquitto_pub -h 192.168.168.251 -t 'incoming/test/mqtt-Energy/power-predict_W2' -m "$PTIME:$OUTPUT"
   mosquitto_pub -h 192.168.168.251 -t 'incoming/test/mqtt-Energy/power-predict_C2' -m "$PTIME:$PCloud"
 
output=$(python3 -W ignore radiation.py -lon $LON -lat $LAT -t $Time)
OUTPUT=$(printf "%0.2f\n" $output)
Opac=$(echo $Cloud*$ACO |bc -l)
TMP=$(echo 100-$Opac |bc -l)
TMP=$(echo $TMP/100 |bc -l)
VisB=$(echo $Vis/16 |bc -l)

numberB=$(echo "$number - $P_offset" | bc -l )
potential=$(./panelconf $numberB)
#echo  $numberB $potential   --------B

# echo "scale=4;(($output*$TMP) * $Vis)/$Wm2" | bc -l
output=$( echo "scale=4;((($output*$TMP) * $VisB)/$Wm2)" | bc -l )
pot=$(echo $potential* $output | bc -l)
pot=$(printf "%0.2f\n" $pot)


echo $Time $potential $pot $output  $Cloud $OUTPUT $SSR|tr " "  "," >> Clima.csv
##### mqtt send to database ##################
  mosquitto_pub -h 192.168.168.251 -t 'incoming/test/mqtt-Energy/power-predict_W2P' -m "$Time:$pot"
      mosquitto_pub -h 192.168.168.251 -t 'incoming/test/mqtt-Energy/power-predict_W2' -m "$Time:$OUTPUT"
   mosquitto_pub -h 192.168.168.251 -t 'incoming/test/mqtt-Energy/power-predict_C2' -m "$Time:$Cloud"
      mosquitto_pub -h 192.168.168.251 -t 'incoming/test/mqtt-Energy/power-predict_C2B' -m "$Time:$CloudB"
       mosquitto_pub -h 192.168.168.251 -t 'incoming/test/mqtt-Energy/power-predict_C2C' -m "$Time:$CloudC"
    mosquitto_pub -h 192.168.168.251 -t 'incoming/test/mqtt-Energy/power-predict_S2' -m "$Time:$SSR" 
   
   
 

PCloud=$Cloud
PTIME=$Time
PVis=$Vis 
 ############# end of extropation ############### 
   
   
 fi
done < /dev/shm/cloudinessC


